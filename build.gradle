apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'war'

// --- REPOSITORIES ---

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

// --- CONFIGURATIONS ---

configurations {
    runtime
    ecj
}
configurations.all {
    // resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

// --- DEPENDENCIES ---

dependencies {

    // ================ COMPILATION ================

    testImplementation 'junit:junit:4.12'
    ecj 'org.eclipse.jdt.core.compiler:ecj:4.4.2'

    // ================= MOLECULER =================

    // nats (required)
    implementation group: 'io.nats', name: 'jnats', version: '2.8.0'

    // DataTree core (required)
    implementation group: 'com.github.berkesa', name: 'datatree-core', version: '1.1.2'

    // Moleculer core (required)
    implementation group: 'com.github.berkesa', name: 'moleculer-java', version: '1.2.19'

    // Moleculer web (required)
    implementation group: 'com.github.berkesa', name: 'moleculer-java-web', version: '1.3.3'

    // Moleculer developer console (optional)
    implementation group: 'com.github.berkesa', name: 'moleculer-java-repl', version: '1.3.0'

    // JMX service (optional)
    implementation group: 'com.github.berkesa', name: 'moleculer-java-jmx', version: '1.2.1'

    // https://mvnrepository.com/artifact/com.diogonunes/JCDP
    implementation group: 'com.diogonunes', name: 'JCDP', version: '3.0.4'

    // ================== LOGGING ==================

    // http://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'

    // http://mvnrepository.com/artifact/org.slf4j/slf4j-jdk14
    implementation group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.30'

    // https://mvnrepository.com/artifact/org.slf4j/log4j-over-slf4j
    implementation group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.30'

    // https://mvnrepository.com/artifact/org.slf4j/jcl-over-slf4j
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.30'

    // ================= MONITORING ================

    // --- SIGAR API TO QUERY THE CPU USAGE ---

    // https://mvnrepository.com/artifact/org.fusesource/sigar
    implementation(group: 'org.fusesource', name: 'sigar', version: '1.6.4') {
        exclude group: 'log4j', module: 'log4j'
    }

    // =============== CDI FRAMEWORK ===============

    // --- SPRING DEPENDENCY INJECTION FRAMEWORK ---

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter
    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter', version: '2.5.0') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'org.springframework', module: 'spring-jcl'
    }

    // ================ JSON APIS ==================

    // --- JACKSON PARSER ---

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.3'

    // ========== TEMPLATE ENGINES =============

    // --- DATATREE TEMPLATES ---

    // https://mvnrepository.com/artifact/com.github.berkesa/datatree-templates
    implementation group: 'com.github.berkesa', name: 'datatree-templates', version: '1.1.4'

}

// --- COMPILATION ---

compileJava {
    options.fork = true
    options.forkOptions.with {
        executable = 'java'
        jvmArgs = ['-classpath', project.configurations.ecj.asPath, 'org.eclipse.jdt.internal.compiler.batch.Main', '-nowarn']
    }
}

// --- WINDOWS INSTALLER ---

// Run the 'gradle buildInstaller' command to create a setup.exe from this project.
// The EXE will be created in this directory: {project root}/build/installer/dist/

// Run the 'gradle war' command to create WAR for J2EE Servers (eg. for JBoss or WebLogic).
// The WAR will be created in this directory: {project root}/build/libs/

jar {
    baseName = 'moleculer-demo'
    version = '1.0.0'
    exclude('**/application.yml')
    exclude('**/logging-development.properties')
    exclude('**/logging-production.properties')
}

task cleanupLibs(type: Delete) {
    delete fileTree('build/libs') {
        include '**/*.jar'
    }
}

task copyLibs(type: Copy) {
    dependsOn jar
    from configurations.compileClasspath
    into 'build/libs'
}

task buildInstaller(type: Exec, group: "build") {
    description 'Create a standalone Windows Installer from this project.'
    dependsOn cleanupLibs, copyLibs
    executable 'installer/setup/ISCC.exe'
    args 'installer/moleculer.config.iss'
}

// --- SERVLET / WAR SETTINGS ---

war {
    rootSpec.exclude('**/logging-development.properties')
    rootSpec.exclude('**/logging-production.properties')
}